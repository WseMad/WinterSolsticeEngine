
e_Flag:

// [1] = 主状态动画中
// [9] = 锁定隐藏禁用主状态
// [14] = 已被从宿主删除
// [15] = 需要刷新


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

【关于this.cAcsPutTgt()何时插入到文档里】

对于Root控件
当收到i_Ent时，说明所属面板入栈，此时应把this.cAcsPutTgt()加入到框架的呈现目标。
当收到i_Lea时，说明所属面板离栈，此时应把this.cAcsPutTgt()从框架的呈现目标里移除。

对于其他控件，情况稍有点复杂：
当收到i_Aded时，说明已加入宿主，但主状态可能＝i_Exit，这时不应加入到Host.cAcsPutTgt()；
当旧的主状态是i_Exit时（新的一定不是），把this.cAcsPutTgt()加入到Host.cAcsPutTgt()中。	①
不对，这样仍然不行，因为面板可以离栈（所有控件回到i_Exit状态），然后又进栈

当收到i_Rmvd时，说明已从宿主中移除，此时应把this.cAcsPutTgt()从Host.cAcsPutTgt()中移除	②

->关于主状态的几个要点：
仅当控件的主状态＝i_Exit时，才能加入到宿主中（即刚加入到宿主中的控件其主状态一定是i_Exit），当控件没有宿主时，拒绝处理主状态变化消息！
同时，才能从宿主中移除

若主状态＝i_Hide，this.cAcsPutTgt()应该在Host.cAcsPutTgt()里，但把visibility设为hidden，也 参 与 布 局 ！！！

->tRndr修改：
cPutSelfTgtToHostTgt（添加），cPutToSelfTgt（改名）, cRtnToSelfSrc（改名）
这几个方法总是检查实参元素是否已经在目的地里了！

vdOnWgtEntPrstTgt：当控件进入呈现目标，PS：其他   ← i_Exit，不受动画影响	// ①收到i_Ent；②当面板已经呈现时，后加入的控件，只有当主状态从i_Exit变化时
vdOnWgtLeaPrstTgt：当控件离开呈现目标，PS：i_Exit ← 其他，因动画延迟，收到i_PrprOver或i_Rmvd（收到后者前一定收到过前者）

【布局】
->一个问题：
如果某个控件在布局2下出现，在布局1下没有出现，那么当从布局2转入布局1时，其主状态如何变化？
方案①：若将主状态改成i_Exit，那么控件就从宿主里移除了！等到后来回到布局2时，还需要new 该控件并恢复其数据，显然这是不行的！
方案②：加入新的主状态i_Ivsb，表“看不见”但仍然参与布局；而i_Hide表示隐藏，不参与布局。
相应修改：
vdOnWgtEntPrstTgt：当控件进入呈现目标，PS：＞i_Hide ← ≤i_Hide，不受动画影响
vdOnWgtLeaPrstTgt：当控件离开呈现目标，PS：≤i_Hide ← ＞i_Hide，因动画延迟，收到i_PrprOver或动画完成时检查主状态

->每个tWgt实例含有一个tPcdrLot实例，e_PcdrLot = null，仅对其子控件进行布局，布局的过程涉及排序：
——根据控件顺序设置PutTgt的z-index，不要随着控件优先级的变化修改文档节点顺序，那样可能会很频繁，比如每次交互都导致页面节点顺序改变。

->tPcdrLot
仍然像以前那样自动创建Boa和Col，只是现在把Put从以前的DOM元素改成tWgt，只操纵PutArea；
但要注意：不能先布局，再把PutTgt放入呈现目标，因为布局需要知道PutArea，而对他的计算又依赖于先把PutTgt放入呈现目标（自动高度计算）！

->流程：
①新建面板，把控件树构建完毕
②打开面板，当面板入栈时会收到i_Ent消息，所有控件也都会收到，每个宿主控件都运行布局（如果e_Lot有效）
③tLot.vcRun算法：
	遍历e_Wgt的每个子控件，根据其PutArea的设置摆放（stCssUtil，或画布绘制……），

	★注意：布局回调渲染器，布局只工作在Wgt和PutArea基础上！

怎么办？
1.有的控件其Area是显示指定的，不受布局影响，如tVsb
2.有的控件其Area由布局决定，比如大多数绑定Html的控件
区分方法是：前者的Area.c_XY有效，后者为null，注意c_XY同时为null或数字，无论哪一类的c_WH总是可以取null。
tLot只处理参与布局的控件，不处理显示指定的控件；布局算定PutArea后（或直接使用显示指定的），交给Rndr呈现！

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		function fLt(a_Rst, a_Area, a_ToLtUp)		{ a_Rst.c_X = a_ToLtUp ? (-l_CamAw + a_Area.c_X) : (a_Area.c_X + l_CamAw); }
		function fCt_X(a_Rst, a_Area, a_ToLtUp)		{ a_Rst.c_X = a_Area.c_X; }
		function fRt(a_Rst, a_Area, a_ToLtUp)		{ a_Rst.c_X = l_CamAw - a_Area.c_X - a_Area.c_W; }

		function fUp(a_Rst, a_Area, a_ToLtUp)		{ a_Rst.c_Y = l_CamAh - a_Area.c_Y - a_Area.c_H; }
		function fCt_Y(a_Rst, a_Area, a_ToLtUp)		{ a_Rst.c_Y = a_Area.c_Y; }
		function fDn(a_Rst, a_Area, a_ToLtUp)		{ a_Rst.c_Y = a_ToLtUp ? (-l_CamAh + a_Area.c_Y) : (a_Area.c_Y + l_CamAh); }

		// 尺寸不变，位置平移
		tSara.scAsn(this.e_DsplArea, this.e_Area);

		// 如果有视口，显示区域的位置取决于e_Area.c_XY，尺寸取决于e_Vwpt.c_WH
		if (this.e_Vwpt)
		{
			this.e_DsplArea.c_W = this.e_Vwpt.c_W;
			this.e_DsplArea.c_H = this.e_Vwpt.c_H;
		}

		var l_Host, l_AccHost = false;
		if (tRefFrm.i_Prst == this.e_RefFrm)
		{
			// 根据视区转换区域位置
			fCvtArea(this.e_DsplArea, nPick.stFrmwk.cAcsPrstTgtArea(), true, this.e_DockWay.valueOf());
		}
		else
		if (tRefFrm.i_Vwpt == this.e_RefFrm)
		{
			// 根据宿主视口转换区域位置，累加宿主显示区域位置
			l_Host = this.e_Host;
			if (l_Host) // 注意宿主可能不存在！如控件尚未加入某个宿主或面板
			{
				// 注意宿主的视口可能不存在，可使用区域代替（不会用到XY）
				l_AccHost = true;
				fCvtArea(this.e_DsplArea, l_Host.e_Vwpt || l_Host.e_Area, true, this.e_DockWay.valueOf());
			}
		}
		else
	//	if (tRefFrm.i_Host == this.e_RefFrm)
		{
			// 根据宿主区域转换区域位置，累加宿主显示区域位置
			l_Host = this.e_Host;
			if (l_Host) // 注意宿主可能不存在！如控件尚未加入某个宿主或面板
			{
				l_AccHost = true;
				fCvtArea(this.e_DsplArea, l_Host.e_Area, true, this.e_DockWay.valueOf());

				if (l_Host.e_Vwpt)
				{
					this.e_DsplArea.c_X -= l_Host.e_Vwpt.c_X;
					this.e_DsplArea.c_Y -= l_Host.e_Vwpt.c_Y;
				}
			}
		}

		if (l_AccHost)
		{
			this.e_DsplArea.c_X += l_Host.e_DsplArea.c_X;
			this.e_DsplArea.c_Y += l_Host.e_DsplArea.c_Y;
		}